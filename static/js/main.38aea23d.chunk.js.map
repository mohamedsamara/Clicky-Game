{"version":3,"sources":["components/Header/Header.js","components/Footer/Footer.js","components/CardItem/CardItem.js","components/CardList/CardList.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","isGuessed","score","highScore","Footer","CardItem","onClick","imageClick","movie","id","title","name","alt","src","image","CardList","movies","map","index","components_CardItem_CardItem","key","App","state","clickedMovie","randomGenerator","b","Math","random","currentMovie","_this","indexOf","setState","sort","alert","concat","max","length","_this$state","this","components_Header_Header","components_CardList_CardList","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38aea23d.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Header.css';\n\nconst Header = props => (\n  <header className='header'>\n    <div className='brand-logo'>Clicky Game</div>\n    <div>{props.isGuessed && <p className='guessed'>You Guessed!</p>}</div>\n    <div className='score-details'>\n      <div>\n        <strong>Score</strong> {props.score}\n      </div>{' '}\n      |{' '}\n      <div>\n        <strong>High Score</strong> {props.highScore}{' '}\n      </div>\n    </div>\n  </header>\n);\n\nexport default Header;\n","import React from 'react';\n\nimport './Footer.css';\n\nconst Footer = props => <footer className='footer'>Clicky Game</footer>;\n\nexport default Footer;\n","import React from 'react';\n\nimport './CardItem.css';\n\nconst CardItem = props => (\n  <div\n    onClick={() => props.imageClick(props.movie.id)}\n    className='card-box col-4 col-xs-4 col-sm-4 col-md-4 col-lg-2'\n  >\n    <div className='img-container'>\n      <img\n        title={props.movie.name}\n        alt={props.movie.name}\n        src={props.movie.image}\n        className='img-thumbnail'\n      />\n    </div>\n  </div>\n);\n\nexport default CardItem;\n","import React from 'react';\n\nimport './CardList.css';\nimport CardItem from '../CardItem';\n\nconst CardList = props => (\n  <div className='container'>\n    <div className='row'>\n      {props.movies.map((movie, index) => (\n        <CardItem key={movie.id} imageClick={props.imageClick} movie={movie} />\n      ))}\n    </div>\n  </div>\n);\n\nexport default CardList;\n","import React, { Component } from 'react';\n\nimport movies from './movies.json';\nimport './App.css';\n\nimport Header from './components/Header';\nimport Footer from './components/Footer';\nimport CardList from './components/CardList';\n\nclass App extends Component {\n  state = {\n    movies,\n    clickedMovie: [],\n    score: 0,\n    highScore: 0,\n    isGuessed: false\n  };\n\n  randomGenerator = (a, b) => (Math.random() > 0.5 ? -1 : 1);\n\n  imageClick = id => {\n    const currentMovie = id;\n    const MovieAlreadyClicked =\n      this.state.clickedMovie.indexOf(currentMovie) > -1;\n\n    if (MovieAlreadyClicked) {\n      this.setState({\n        movies: this.state.movies.sort(this.randomGenerator),\n        clickedMovie: [],\n        score: 0,\n        highScore: 0,\n        isGuessed: false\n      });\n      alert('You lose. Play again?');\n    } else {\n      let score = this.state.score;\n      let movies = this.state.movies;\n\n      this.setState(\n        {\n          movies: this.state.movies.sort(this.randomGenerator),\n          clickedMovie: this.state.clickedMovie.concat(currentMovie),\n          score: score + 1,\n          highScore: Math.max(this.state.highScore, score),\n          isGuessed: true\n        },\n        () => {\n          if (this.state.score === movies.length) {\n            alert('Yay! You Win!');\n            this.setState({\n              movies: this.state.movies.sort(this.randomGenerator),\n              clickedMovie: [],\n              score: 0,\n              highScore: 0\n            });\n          }\n        }\n      );\n    }\n  };\n\n  render() {\n    const { movies, score, highScore, isGuessed } = this.state;\n\n    return (\n      <div className='application'>\n        <Header score={score} highScore={highScore} isGuessed={isGuessed} />\n        <div className='wrapper'>\n          <CardList movies={movies} imageClick={this.imageClick} />\n        </div>\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}